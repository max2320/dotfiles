#!/usr/bin/env bash

KUBERNETS_RESOURCES='pod service deployment job cronjob replicaset secret'
KUBERNETES_LOG_LINES=50
KUBERNETES_LOG_LINES=50

## kb
## Description
##   Alias for kubectl
## Usage:
##   $ kb <kubectl args>

kb() {
  kubectl $@
}

## kb-ctx
## Description
##   print current or swtich kubernets context
## Usage:
##   $ kb-ctx # print context
##   $ kb-ctx <context> # switch to context

kb-ctx() {
  if [[ $# -eq 1 ]]; then
    kb config use-context $1
  else
    kb config current-context
  fi
}

## kb-nsp
## Description
##   print current kubernetes namespace
## Usage:
##   $ kb-nsp # print current kubernetes

kb-nsp() {
  kubectl config view --minify | grep namespace: | tr ": " |awk '{print $2}'
}

## kb-get
## Description
##   Get kubernetes components
## Usage:
##   $ kb-get # get all components
##   $ kb-get-<component type>
##   $ kb-get <component type>

kb-get() {
  if [[ $# -eq 1 ]]; then
    kb get $@
  else
    kb get all
  fi
}

kb-first() {
  kb-grep $1 $2 |  head -n 1
}

for resource in $KUBERNETS_RESOURCES
do
  alias kb-$resource="kb-get $resource"
  alias kb-$resource-first="kb-first $resource"
done

## kb-logs
## Description
##   Kubernetes logs
## Usage:
##   $ kb-logs <resource name>

kb-logs() {
  kb logs -f --tail=$KUBERNETES_LOG_LINES $@
}

## kb-logsa
## Description
##   Kubernetes all containers logs
## Usage:
##   $ kb-logsa <resource name>

kb-logsa() {
  kb-logs --all-containers=true $@
}


## kb-logsap
## Description
##   Kubernetes all containers logs with prefix
## Usage:
##   $ kb-logsap <prefix>

kb-logsap(){
  kb-logsa --prefix=true --max-log-requests=100 -l app=$1
}


kb-logsapt(){
  kb-logsa --prefix=true --timestamps=true --max-log-requests=100 -l app=$1
}

## kbx
## Description
##   Kubernetes exec with interactive flags.
##   Connects to the first resource available
## Usage:
##   $ kbx <resource name>

kbx() {
  if [[ $# -eq 0 ]]; then
    echo "Missing pod name prefix"
    return
  fi

  if [[ $# -eq 1 ]]; then
    echo "Missing command"
    return
  fi

  pod_name=$(kb-pod-first $1)

  echo "Connecting to $pod_name"
  kubectl exec -it $pod_name -- $2
}

## kbx-rc
## Description
##   Kubernetes exec rails console
## Usage:
##   $ kbx-rc <resource name>

kbx-rc() {
  kbx $1 -- rails c
}

## kbx-sh
## Description
##   Kubernetes exec sh
## Usage:
##   $ kbx-sh <resource name>

kbx-sh() {
  kbx $1 -- sh
}

## kbx-bash
## Description
##   Kubernetes exec bash
## Usage:
##   $ kbx-bash <resource name>

kbx-bash() {
  kbx $1 -- bash
}

# kb-img(){
#   if [[ $# -eq 1 ]]; then
#     echo "kb config set image deployment/$1 $2"
#   else

#     kb config current-context
#   fi
# }


## kb-pf
## Description
##   Kubernetes port forward
## Usage:
##   $ kb-pf <resource name>

kb-pf() {
  kubectl port-forward $@
}

## kb-restart
## Description
##   Kubernetes restart (aka rollout restart)
## Usage:
##   $ kb-restart <resource name>

kb-restart() {
  kb rollout restart $@
}

## kb-top
## Description
##   Kubernetes top pods
## Usage:
##   $ kb-top


kb-top() {
  kb top pods -n $(kb-nsp)
}

## kb-del
## Description
##   Kubernetes delete
## Usage:
##   $ kb-del <resource name>

kb-del() {
  kb delete $@
}

## kb-terminate
## Description
##   Kubernetes delete force
## Usage:
##   $ kb-terminate <resource name>

kb-terminate() {
  kb-del $@ --grace-period=0 --force
}

## kb-grep
## Description
##   retunrs all resource names for a keyword search
## Usage:
##   $ kb-grep <resource type> <resource name>

kb-grep() {
  kb-get $1 | grep $2 | awk '{print $1}'
}

KUBERNETES_FAIL_STATUSES='Error ContainerStatusUnknown OOMKilled'

## kb-sts-fail
## Description
##   retunrs all pods with failing statuses
##   Tracked statueses:
##     - Error
##     - ContainerStatusUnknown
##     - OOMKilled
## Usage:
##   $ kb-sts-fail <resource type> <resource name>

kb-sts-fail() {
  for resource_type in $KUBERNETES_FAIL_STATUSES
  do
    kb-grep "pods" $resource_type
  done
}


